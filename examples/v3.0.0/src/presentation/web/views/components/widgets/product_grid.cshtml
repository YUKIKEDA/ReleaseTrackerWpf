@model ProductGridViewModel

<div class="product-grid-container">
    <div class="grid-header">
        <h2 class="grid-title">@Model.Title</h2>
        <div class="grid-controls">
            <select class="form-control" id="sortSelect" onchange="sortProducts(this.value)">
                <option value="name-asc">名前 (昇順)</option>
                <option value="name-desc">名前 (降順)</option>
                <option value="price-asc">価格 (昇順)</option>
                <option value="price-desc">価格 (降順)</option>
                <option value="date-newest">最新順</option>
                <option value="date-oldest">古い順</option>
            </select>
            <div class="view-toggle">
                <button class="btn btn-sm" onclick="toggleView('grid')" id="gridViewBtn">
                    <i class="fas fa-th"></i>
                </button>
                <button class="btn btn-sm" onclick="toggleView('list')" id="listViewBtn">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>
    </div>
    
    <div class="product-grid" id="productGrid">
        @foreach (var product in Model.Products)
        {
            <div class="product-card" data-product-id="@product.Id">
                <div class="product-image">
                    <img src="@product.ImageUrl" alt="@product.Name" />
                    @if (product.IsOnSale)
                    {
                        <div class="sale-badge">セール</div>
                    }
                    @if (product.StockQuantity <= 5)
                    {
                        <div class="low-stock-badge">在庫わずか</div>
                    }
                </div>
                
                <div class="product-info">
                    <h3 class="product-name">@product.Name</h3>
                    <p class="product-description">@product.Description</p>
                    
                    <div class="product-price">
                        @if (product.OriginalPrice.HasValue && product.OriginalPrice > product.Price)
                        {
                            <span class="original-price">¥@product.OriginalPrice.Value.ToString("N0")</span>
                        }
                        <span class="current-price">¥@product.Price.ToString("N0")</span>
                    </div>
                    
                    <div class="product-meta">
                        <span class="category">@product.CategoryName</span>
                        <span class="stock">在庫: @product.StockQuantity</span>
                    </div>
                    
                    <div class="product-actions">
                        <button class="btn btn-primary btn-sm" onclick="addToCart(@product.Id)">
                            <i class="fas fa-cart-plus"></i> カートに追加
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" onclick="viewProduct(@product.Id)">
                            <i class="fas fa-eye"></i> 詳細
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
    
    @if (Model.Products.Any())
    {
        <div class="pagination-container">
            <nav aria-label="商品ページネーション">
                <ul class="pagination">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(@Model.CurrentPage - 1)">前へ</a>
                        </li>
                    }
                    
                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="#" onclick="changePage(@i)">@i</a>
                        </li>
                    }
                    
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="#" onclick="changePage(@Model.CurrentPage + 1)">次へ</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="no-products">
            <i class="fas fa-search"></i>
            <p>商品が見つかりませんでした</p>
        </div>
    }
</div>

<style>
.product-grid-container {
    padding: 20px;
}

.grid-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.grid-title {
    margin: 0;
    color: #333;
}

.grid-controls {
    display: flex;
    align-items: center;
    gap: 12px;
}

.view-toggle {
    display: flex;
    gap: 4px;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.product-card {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    background: white;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.product-image {
    position: relative;
    height: 200px;
    overflow: hidden;
}

.product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.sale-badge, .low-stock-badge {
    position: absolute;
    top: 8px;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
}

.sale-badge {
    left: 8px;
    background-color: #dc3545;
    color: white;
}

.low-stock-badge {
    right: 8px;
    background-color: #ffc107;
    color: #333;
}

.product-info {
    padding: 16px;
}

.product-name {
    margin: 0 0 8px 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
}

.product-description {
    margin: 0 0 12px 0;
    font-size: 14px;
    color: #666;
    line-height: 1.4;
}

.product-price {
    margin-bottom: 12px;
}

.original-price {
    text-decoration: line-through;
    color: #999;
    font-size: 14px;
    margin-right: 8px;
}

.current-price {
    font-size: 18px;
    font-weight: 600;
    color: #dc3545;
}

.product-meta {
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;
    font-size: 12px;
    color: #666;
}

.product-actions {
    display: flex;
    gap: 8px;
}

.pagination-container {
    display: flex;
    justify-content: center;
}

.no-products {
    text-align: center;
    padding: 40px;
    color: #666;
}

.no-products i {
    font-size: 48px;
    margin-bottom: 16px;
    color: #ccc;
}

/* List view styles */
.product-grid.list-view {
    grid-template-columns: 1fr;
}

.product-grid.list-view .product-card {
    display: flex;
    height: 120px;
}

.product-grid.list-view .product-image {
    width: 120px;
    height: 100%;
    flex-shrink: 0;
}

.product-grid.list-view .product-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}
</style>

<script>
function sortProducts(sortValue) {
    // Sort products based on selected criteria
    console.log('Sorting by:', sortValue);
    // Implementation would go here
}

function toggleView(viewType) {
    const grid = document.getElementById('productGrid');
    const gridBtn = document.getElementById('gridViewBtn');
    const listBtn = document.getElementById('listViewBtn');
    
    if (viewType === 'list') {
        grid.classList.add('list-view');
        listBtn.classList.add('active');
        gridBtn.classList.remove('active');
    } else {
        grid.classList.remove('list-view');
        gridBtn.classList.add('active');
        listBtn.classList.remove('active');
    }
}

function changePage(pageNumber) {
    // Navigate to different page
    console.log('Changing to page:', pageNumber);
    // Implementation would go here
}

function addToCart(productId) {
    // Add product to cart
    console.log('Adding to cart:', productId);
    // Implementation would go here
}

function viewProduct(productId) {
    // Navigate to product detail page
    console.log('Viewing product:', productId);
    // Implementation would go here
}
</script>
